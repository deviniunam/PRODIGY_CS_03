import string
import secrets
import re

def check_password_strength(password):
    """
    Assess the strength of a password based on specific criteria.

    Args:
    password (str): The password to be assessed.

    Returns:
    tuple: A string containing feedback about the password strength and an integer representing the strength score.
    """
    # Define the criteria for a strong password
    length_criteria = len(password) >= 8
    uppercase_criteria = re.search(r'[A-Z]', password) is not None
    lowercase_criteria = re.search(r'[a-z]', password) is not None
    digit_criteria = re.search(r'\d', password) is not None
    special_char_criteria = re.search(r'[\W_]', password) is not None

    # Initialize the strength counter and feedback list
    strength = 0
    feedback = []

    # Check length criteria
    if length_criteria:
        strength += 1
    else:
        feedback.append("Password should be at least 8 characters long.")

    # Check uppercase criteria
    if uppercase_criteria:
        strength += 1
    else:
        feedback.append("Password should include at least one uppercase letter.")

    # Check lowercase criteria
    if lowercase_criteria:
        strength += 1
    else:
        feedback.append("Password should include at least one lowercase letter.")

    # Check digit criteria
    if digit_criteria:
        strength += 1
    else:
        feedback.append("Password should include at least one digit.")

    # Check special character criteria
    if special_char_criteria:
        strength += 1
    else:
        feedback.append("Password should include at least one special character.")

    # Assess the overall strength of the password and provide feedback
    if strength == 5:
        feedback.append("Your password is strong.")
    elif 3 <= strength < 5:
        feedback.append("Your password is moderate. Consider making it stronger.")
    else:
        feedback.append("Your password is weak. Consider making it stronger.")

    return '\n'.join(feedback), strength

def generate_password():
    """
    Generate a random password containing 12 characters.

    Returns:
    str: A randomly generated password.
    """
    # Generate a random password of 12 characters from letters, digits, and punctuation
    return ''.join(secrets.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(12))

def main():
    """
    Main function to provide a menu for checking password strength and generating random passwords.
    """
    while True:
        # Display the menu options
        print("\nPassword Strength Checker")
        print("1. Check Password Strength")
        print("2. Generate Password")
        print("3. Exit")

        # Get user choice
        choice = input("Enter your choice: ")

        if choice == '1':
            # Check password strength
            password = input("Enter the password: ")
            result, _ = check_password_strength(password)
            print(result)
        elif choice == '2':
            # Generate and display a random password
            password = generate_password()
            print(f"Generated Password: {password}")
        elif choice == '3':
            # Exit the program
            break
        else:
            # Handle invalid input
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
